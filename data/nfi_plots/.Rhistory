focal <- focal(seed)
(seed  <- seeds[sample(nrow(seeds),1),])
focal <- focal(seed)
focal <- function(_seed){
sapply(1:8,function(z){
r[_seed$x+win[z,"x"],_seed$y+win[z,"y"]]
})
}
neighbours <- function(var_seed){
sapply(1:8,function(z){
r[var_seed[,"x"]+win[z,"x"],var_seed[,"y"]+win[z,"y"]]
})
}
focal <- neighbours(seed)
focal
seed$x <- 0
seed$y <- 0
focal <- neighbours(seed)
focal
seed$x <- 1
seed$y <- 1
seed
focal <- neighbours(seed)
focal
class_size
n
class_size <- df[class,2]
seeds <- data.frame(sampleRandom(r,1000,xy=T))
seeds <- seeds[seeds$layer == 0,]
seed  <- seeds[sample(nrow(seeds),1),]
n     <- floor(rnorm(1,mean=class_size/10,sd=class_size/100))
s     <- rnorm(1,class_size/n,sd=150)
n
s     <- rnorm(1,class_size/n,sd=150)
class_size/100
n
r0 <- as.data.frame(rasterToPoints(map,fun=function(rast){rast==0}))
r0 <- as.data.frame(rasterToPoints(r,fun=function(rast){rast==0}))
seed <- data.frame(sampleRandom(r,1,xy=T))
seed <- data.frame(sampleRandom(r0,1,xy=T))
seed  <- r0[sample(nrow(r0),1),]
seed
neighbours <- function(point){
sapply(1:8,function(z){
r[point[,"x"]+win[z,"x"],point[,"y"]+win[z,"y"]]
})
}
focal <- neighbours(seed)
focal
neighbours <- function(point){
sapply(1:8,function(z){
r[point[,"x"]+win[z,"x"],point[,"y"]+win[z,"y"]]
})
}
r0    <- as.data.frame(rasterToPoints(r,fun=function(rast){rast==0}))
seed  <- r0[sample(nrow(r0),1),]
focal <- neighbours(seed)
focal
z <- sample(which(focal == 0),1)
head <- seed
focal <- neighbours(head)
z <- sample(which(focal == 0),1)
head$x <- seed$x+win[win$z==z,]$x
head <- seed
r[head$x, head$y] <- class
head$x <- head$x+win[win$z==z,]$x
head$y <- head$y+win[win$z==z,]$y
r[head$x, head$y] <- class
s     <- floor(rnorm(1,class_size/n,sd=150))
for(i in 1:floor(rnorm(1,class_size/n,sd=150))){
focal  <- neighbours(head)
z      <- sample(which(focal == 0),1)
head$x <- head$x+win[win$z==z,]$x
head$y <- head$y+win[win$z==z,]$y
r[head$x, head$y] <- class
}
freq(r)
head
(seed <- r0[sample(nrow(r0),1),])
(seed <- r0[sample(nrow(r0),1),])
head <- seed
r[head$x, head$y] <- class
for(i in 1:floor(rnorm(1,class_size/n,sd=150))){
focal  <- neighbours(head)
z      <- sample(which(focal == 0),1)
head$x <- head$x+win[win$z==z,]$x
head$y <- head$y+win[win$z==z,]$y
r[head$x, head$y] <- class
}
head
all(focal >0)
r <- raster(m,xmn=0.5,xmx=500.5,ymn=0.5,ymx=300.5)
res(r)
freq(r)
r0   <- as.data.frame(rasterToPoints(r,fun=function(rast){rast==0}))
(seed <- r0[sample(nrow(r0),1),])
head <- seed
r[head$x, head$y] <- class
for(i in 1:floor(rnorm(1,class_size/n,sd=150))){
focal  <- neighbours(head)
if(all(focal >0)){stop("looped")}else{
z      <- sample(which(focal == 0),1)
head$x <- head$x+win[win$z==z,]$x
head$y <- head$y+win[win$z==z,]$y
r[head$x, head$y] <- class
}
}
all(focal >0)
head
focal
focal  <- neighbours(head)
focal
neighbours <- function(point){
sapply(1:8,function(z){
r[point[,"x"]+win[z,"x"],point[,"y"]+win[z,"y"]]
})
}
focal  <- neighbours(head)
r[head$x, head$y]
head
extent(r)
r[head$x, head$y]
freq(r)
head$x
head$y
r[head$x, head$y]
r[10,10]
r[310,10]
r[10,310]
plot(r)
?setValues(x = )
?setValue
?setValues
View(r)
r@data[10,310]
summary(r)
r[head$x, head$y]
plot(r)
head
extent(r)
r[head$y, head$x] <- class
r[head$y, head$x]
freq(r)
r <- raster(m,xmn=0.5,xmx=500.5,ymn=0.5,ymx=300.5)
res(r)
freq(r)
win <- data.frame(t(cbind(c(-1,-1,1),
c(0,-1,2),
c(1,-1,3),
c(1,0,4),
c(1,1,5),
c(0,1,6),
c(-1,1,7),
c(-1,0,8))))
names(win) <- c("x","y","z")
neighbours <- function(point){
sapply(1:8,function(z){
r[point[,"x"]+win[z,"x"],point[,"y"]+win[z,"y"]]
})
}
class <- 1
class_size <- df[class,2]
n          <- floor(rnorm(1,mean=class_size/10,sd=class_size/100))
r0   <- as.data.frame(rasterToPoints(r,fun=function(rast){rast==0}))
(seed <- r0[sample(nrow(r0),1),])
head <- seed
r[head$y, head$x] <- class
for(i in 1:floor(rnorm(1,class_size/n,sd=150))){
focal  <- neighbours(head)
if(all(focal >0)){stop("looped")}else{
z      <- sample(which(focal == 0),1)
head$x <- head$x+win[win$z==z,]$x
head$y <- head$y+win[win$z==z,]$y
r[head$y, head$x] <- class
}
}
freq(r)
floor(rnorm(1,class_size/n,sd=150))
focal
snake <- 0
for(i in 1:floor(rnorm(1,class_size/n,sd=150))){
snake <- snake + 1
focal  <- neighbours(head)
if(all(focal >0)){stop("looped")}else{
z      <- sample(which(focal == 0),1)
head$x <- head$x+win[win$z==z,]$x
head$y <- head$y+win[win$z==z,]$y
r[head$y, head$x] <- class
}
}
snake
freq(r)
plot(r)
while(freq(r)[2,1] < 1000){
r0   <- as.data.frame(rasterToPoints(r,fun=function(rast){rast==0}))
(seed <- r0[sample(nrow(r0),1),])
head <- seed
r[head$y, head$x] <- class
plot(r)
summary(r)
extent(r)
plot(r)
freq(r)
snake <- 0
for(i in 1:floor(rnorm(1,class_size/n,sd=150))){
snake <- snake + 1
focal  <- neighbours(head)
if(!(all(focal>0))){
z      <- sample(which(focal == 0),1)
head$x <- head$x+win[win$z==z,]$x
head$y <- head$y+win[win$z==z,]$y
r[head$y, head$x] <- class
}else(stop())
}
}
freq(r)
plot(r)
all(focal>0)
head
neighbours(head)
m  <- matrix(nrow = 300,
ncol = 500,
data = 0 )
r <- raster(m,xmn=0.5,xmx=500.5,ymn=0.5,ymx=300.5)
res(r)
freq(r)
win <- data.frame(t(cbind(c(-1,-1,1),
c(0,-1,2),
c(1,-1,3),
c(1,0,4),
c(1,1,5),
c(0,1,6),
c(-1,1,7),
c(-1,0,8))))
names(win) <- c("x","y","z")
neighbours <- function(point){
sapply(1:8,function(z){
r[point[,"y"]+win[z,"y"],point[,"x"]+win[z,"x"]]
})
}
class <- 1
class_size <- df[class,2]
n          <- floor(rnorm(1,mean=class_size/10,sd=class_size/100))
while(freq(r)[2,1] < 1000){
r0   <- as.data.frame(rasterToPoints(r,fun=function(rast){rast==0}))
(seed <- r0[sample(nrow(r0),1),])
head <- seed
r[head$y, head$x] <- class
plot(r)
summary(r)
extent(r)
plot(r)
freq(r)
snake <- 0
for(i in 1:floor(rnorm(1,class_size/n,sd=150))){
snake <- snake + 1
focal  <- neighbours(head)
if(!(all(focal>0))){
z      <- sample(which(focal == 0),1)
head$x <- head$x+win[win$z==z,]$x
head$y <- head$y+win[win$z==z,]$y
r[head$y, head$x] <- class
}else(stop())
}
}
freq(r)
snakes <- 0
while(snakes < n){
snakes <- snakes +1
r0   <- as.data.frame(rasterToPoints(r,fun=function(rast){rast==0}))
(seed <- r0[sample(nrow(r0),1),])
head <- seed
r[head$y, head$x] <- class
plot(r)
summary(r)
extent(r)
plot(r)
freq(r)
snake <- 0
for(i in 1:floor(rnorm(1,class_size/n,sd=150))){
snake <- snake + 1
focal  <- neighbours(head)
if(!(all(focal>0))){
z      <- sample(which(focal == 0),1)
head$x <- head$x+win[win$z==z,]$x
head$y <- head$y+win[win$z==z,]$y
r[head$y, head$x] <- class
}else(stop())
}
}
freq(r)
snake
snakes
seed
head <- seed
r[head$y, head$x] <- class
plot(r)
summary(r)
extent(r)
plot(r)
freq(r)
snake <- 0
for(i in 1:floor(rnorm(1,class_size/n,sd=150))){
snake <- snake + 1
focal  <- neighbours(head)
if(!(all(focal>0))){
z      <- sample(which(focal == 0),1)
head$x <- head$x+win[win$z==z,]$x
head$y <- head$y+win[win$z==z,]$y
r[head$y, head$x] <- class
}else(stop())
}
snake <- 0
for(i in 1:floor(rnorm(1,class_size/n,sd=150))){
snake <- snake + 1
focal  <- neighbours(head)
if(!(all(focal>0))){
z      <- sample(which(focal == 0),1)
head$x <- head$x+win[win$z==z,]$x
head$y <- head$y+win[win$z==z,]$y
r[head$y, head$x] <- class
}else(stop("stop"))
}
all(focal>0)
!(all(focal>0))
m  <- matrix(nrow = 300,
ncol = 500,
data = 0 )
r <- raster(m,xmn=0.5,xmx=500.5,ymn=0.5,ymx=300.5)
res(r)
freq(r)
win <- data.frame(t(cbind(c(-1,-1,1),
c(0,-1,2),
c(1,-1,3),
c(1,0,4),
c(1,1,5),
c(0,1,6),
c(-1,1,7),
c(-1,0,8))))
names(win) <- c("x","y","z")
neighbours <- function(point){
sapply(1:8,function(z){
r[point[,"y"]+win[z,"y"],point[,"x"]+win[z,"x"]]
})
}
class <- 1
class_size <- df[class,2]
n          <- floor(rnorm(1,mean=class_size/10,sd=class_size/100))
snakes <- 0
while(snakes < n){
snakes <- snakes +1
r0   <- as.data.frame(rasterToPoints(r,fun=function(rast){rast==0}))
(seed <- r0[sample(nrow(r0),1),])
head <- seed
r[head$y, head$x] <- class
snake <- 0
for(i in 1:floor(rnorm(1,class_size/n,sd=150))){
snake <- snake + 1
focal  <- neighbours(head)
if(!(all(focal>0))){
z      <- sample(which(focal == 0),1)
head$x <- head$x+win[win$z==z,]$x
head$y <- head$y+win[win$z==z,]$y
r[head$y, head$x] <- class
}else{stop("stop")}
}
}
snakes
r0   <- as.data.frame(rasterToPoints(r,fun=function(rast){rast==0}))
(seed <- r0[sample(nrow(r0),1),])
head <- seed
r[head$y, head$x] <- class
snake <- 0
for(i in 1:floor(rnorm(1,class_size/n,sd=150))){
snake <- snake + 1
focal  <- neighbours(head)
if(!(all(focal>0))){
z      <- sample(which(focal == 0),1)
head$x <- head$x+win[win$z==z,]$x
head$y <- head$y+win[win$z==z,]$y
r[head$y, head$x] <- class
}else{stop("stop")}
}
plot(r)
summary(r)
extent(r)
plot(r)
freq(r)
r <- raster(m,xmn=0.5,xmx=500.5,ymn=0.5,ymx=300.5)
class <- 1
class_size <- df[class,2]
n          <- floor(rnorm(1,mean=class_size/10,sd=class_size/100))
snakes <- 0
while(snakes < n){
snakes <- snakes +1
r0   <- as.data.frame(rasterToPoints(r,fun=function(rast){rast==0}))
(seed <- r0[sample(nrow(r0),1),])
head <- seed
r[head$y, head$x] <- class
snake <- 0
for(i in 1:floor(rnorm(1,class_size/n,sd=150))){
snake <- snake + 1
focal  <- neighbours(head)
if(!(all(focal>0))){
z      <- sample(which(focal == 0),1)
head$x <- head$x+win[win$z==z,]$x
head$y <- head$y+win[win$z==z,]$y
r[head$y, head$x] <- class
}
}
}
plot(r)
########################################
# include all the needed packages here #
options(stringsAsFactors = F)
packages <- function(x){
x <- as.character(match.call()[[2]])
if (!require(x,character.only=TRUE)){
install.packages(pkgs=x,repos="http://cran.r-project.org")
require(x,character.only=TRUE)
}
}
## Packages for geospatial data handling
packages(raster)
packages(rgeos)
packages(rgdal)
packages(Formula)
## Packages for Shiny
packages(shiny)
packages(shinydashboard)
packages(shinyFiles)
packages(snow)
packages(htmltools)
packages(devtools)
#packages(RCurl)
## Packages for data table handling
packages(xtable)
packages(DT)
packages(dismo)
packages(stringr)
packages(plyr)
## Packages for graphics and interactive maps
packages(ggplot2)
packages(leaflet)
packages(RColorBrewer)
## Packages for BFAST
packages(bfastSpatial)
packages(parallel)
#packages(ncdf4)
########################################
# include all the needed packages here #
options(stringsAsFactors = F)
packages <- function(x){
x <- as.character(match.call()[[2]])
if (!require(x,character.only=TRUE)){
install.packages(pkgs=x,repos="http://cran.r-project.org")
require(x,character.only=TRUE)
}
}
## Packages for geospatial data handling
packages(raster)
packages(rgeos)
packages(rgdal)
packages(Formula)
## Packages for Shiny
packages(shiny)
packages(shinydashboard)
packages(shinyFiles)
packages(snow)
packages(htmltools)
packages(devtools)
#packages(RCurl)
## Packages for data table handling
packages(xtable)
packages(DT)
packages(dismo)
packages(stringr)
packages(plyr)
## Packages for graphics and interactive maps
packages(ggplot2)
packages(leaflet)
packages(RColorBrewer)
## Packages for BFAST
#packages(bfastSpatial)
packages(parallel)
#packages(ncdf4)
### Set working directory
workdir      <-  "/media/dannunzio/OSDisk/Users/dannunzio/Documents/countries/sudan/data/nfi_plots/"
setwd(workdir)
### Read results from Collect
nfi <- read.csv("collect-csv-data-export-sudan_nfi_2017-2018-06-25T14_28_53/tree.csv")
### See how many trees are measured per SU
(trees_measured <- table(nfi$su_su_no))
plot(trees_measured)
### Choose 3 SU with different tree numbers
sel <- c(783,952,615)
### CHECK & CLEAN
names(nfi)
summary(nfi$tree_axis_distance)
summary(nfi$tree_right_axis)
summary(nfi$tree_left_axis)
table(nfi$tree_axis_distance)
nfi[!is.na(nfi$tree_right_axis) & nfi$tree_right_axis > 10,"tree_axis_distance"] <- NA
nfi[!is.na(nfi$tree_left_axis)  & nfi$tree_left_axis  > 10,"tree_axis_distance"] <- NA
nfi[is.na(nfi$tree_axis_distance),"tree_right_axis"] <- NA
nfi[is.na(nfi$tree_axis_distance),"tree_left_axis"] <- NA
### PUT NA.VALUES OF RIGHT & LEFT COORDINATES TO ZERO
nfi[!is.na(nfi$tree_axis_distance) & is.na(nfi$tree_right_axis),"tree_right_axis"] <- 0
nfi[!is.na(nfi$tree_axis_distance) & is.na(nfi$tree_left_axis), "tree_left_axis" ] <- 0
### Read plot coordinates as measured in field
df <- read.csv("collect-csv-data-export-sudan_nfi_2017-2018-06-25T14_28_53/plot.csv")
names(df)
